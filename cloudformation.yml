AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for photo album application

Resources:
  PhotoStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dc-photo-storage-bucket

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dc-frontend-bucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  IndexPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: index-photos-lambda
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import logging
          from botocore.exceptions import ClientError
          import json
          import base64
          from opensearchpy import OpenSearch, RequestsHttpConnection
          import os

          # Instantiate logger
          logger = logging.getLogger(__name__)

          # connect to the Rekognition client
          rekognition = boto3.client('rekognition')
          codepipeline = boto3.client('codepipeline')


          s3 = boto3.client('s3')
          # es_endpoint = os.getenv('elasticsearch_endpoint')

          # # Initialize Elasticsearch client
          # es = Elasticsearch([{'host': es_endpoint, 'port': 443, 'use_ssl': True}])


          # Set up OpenSearch client
          OPENSEARCH_HOST = os.environ['OPENSEARCH_HOST']
          OPENSEARCH_USERNAME = os.environ['OPENSEARCH_USERNAME']
          OPENSEARCH_PASSWORD = os.environ['OPENSEARCH_PASSWORD']

          os_client = OpenSearch(
              hosts=[OPENSEARCH_HOST],
              http_auth=(OPENSEARCH_USERNAME, OPENSEARCH_PASSWORD),  # Add your OpenSearch credentials if necessary
              use_ssl=True,
              verify_certs=True,
              connection_class=RequestsHttpConnection
          )


          def lambda_handler(event, context):

              if 'CodePipeline.job' in event:
                  job_id = event['CodePipeline.job']['id']
                  try:
                      codepipeline.put_job_success_result(jobId=job_id)
                  except Exception as e:
                      codepipeline.put_job_failure_result(
                          jobId=job_id,
                          failureDetails={
                              'type': 'JobFailed',
                              'message': str(e)
                          }
                      )
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Processed as part of CodePipeline')
                  }
              else:

                  event = event['Records'][0]
                  bucket = event['s3']['bucket']['name']
                  key = event['s3']['object']['key']

                  try:
                      image = None
                      s3_object = s3.head_object(Bucket = bucket, Key = key)
                      custom_labels = s3_object.get('Metadata', {}).get('x-amz-meta-customlabels', '')
                      
                      A1 = [label.strip() for label in custom_labels.split(',')] if custom_labels else []

                      image = s3.get_object(Bucket = bucket, Key = key)['Body'].read()

                      response = rekognition.detect_labels(Image={'Bytes': image})

                      labels = A1 + [label['Name'] for label in response['Labels']]

                      es_document = {
                          "objectKey": key,
                          "bucket": bucket,
                          "createdTimestamp": s3_object['LastModified'].isoformat(),
                          "labels": labels
                      }

                      print("JSON object for ElasticSearch:")
                      print(json.dumps(es_document, indent=2))
                      statusCode = None

                      try:
                          os_client.index(index="photos", body=es_document)
                          # es.index(index="photos", body=es_document)
                      except Exception as e:
                          print("ERROR IN INDEXING")
                          print(e)
                          statusCode = 500

                      print(response)
                      lambda_response = {
                          "statusCode": statusCode if statusCode else 200,
                          "body": json.dumps(response)
                      }
                      print("Labels found:")
                      print(labels)

                  except ClientError as client_err:

                      error_message = "Couldn't analyze image: " + client_err.response['Error']['Message']

                      lambda_response = {
                          'statusCode': 400,
                          'body': {
                              "Error": client_err.response['Error']['Code'],
                              "ErrorMessage": error_message
                          }
                      }
                      logger.error("Error function %s: %s",
                                      context.invoked_function_arn, error_message)


                  except ValueError as val_error:
                      lambda_response = {
                          'statusCode': 400,
                          'body': {
                              "Error": "ValueError",
                              "ErrorMessage": format(val_error)
                          }
                      }
                      logger.error("Error function %s: %s",
                                  context.invoked_function_arn, format(val_error))

              return lambda_response

      Runtime: python3.8

  SearchPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: search-photos-lambda
      Handler: search.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from opensearchpy import OpenSearch, RequestsHttpConnection

          lex = boto3.client('lexv2-runtime')

          OPENSEARCH_HOST = os.environ['OPENSEARCH_HOST']
          OPENSEARCH_USERNAME = os.environ['OPENSEARCH_USERNAME']
          OPENSEARCH_PASSWORD = os.environ['OPENSEARCH_PASSWORD']

          LEX_ALIAS_ID = os.environ['BOT_ALIAS_ID']
          LEX_BOT_ID = os.environ['BOT_ID']
          codepipeline = boto3.client('codepipeline')



          os_client = OpenSearch(
              hosts=[OPENSEARCH_HOST],
              http_auth=(OPENSEARCH_USERNAME, OPENSEARCH_PASSWORD),  # Add your OpenSearch credentials if necessary
              use_ssl=True,
              verify_certs=True,
              connection_class=RequestsHttpConnection
          )

          def lambda_handler(event, context):

              if 'CodePipeline.job' in event:
                  job_id = event['CodePipeline.job']['id']
                  try:
                      codepipeline.put_job_success_result(jobId=job_id)
                  except Exception as e:
                      codepipeline.put_job_failure_result(
                          jobId=job_id,
                          failureDetails={
                              'type': 'JobFailed',
                              'message': str(e)
                          }
                      )
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Processed as part of CodePipeline')
                  }
              
              query = event['queryStringParameters']['q']
              
              # Disambiguate query using Lex
              lex_response = lex.recognize_text(
                  botId = LEX_BOT_ID,
                  botAliasId = LEX_ALIAS_ID,
                  localeId='en_US',
                  sessionId='test-session',
                  text=query
              )
              
              # Extract keywords from Lex response
              keywords = []
              if 'interpretations' in lex_response:
                  for interpretation in lex_response['interpretations']:
                      if 'intent' in interpretation:
                          for slot in interpretation['intent']['slots'].values():
                              if slot and 'value' in slot:
                                  keywords.append(slot['value']['interpretedValue'])
              
              # If keywords found, search OpenSearch
              if keywords:
                  search_query = {
                      "query": {
                          "multi_match": {
                              "query": " ".join(keywords),
                              "fields": ["labels"]
                          }
                      }
                  }
                  search_results = os_client.search(index="photos", body=search_query)
                  return {
                      'statusCode': 200,
                      'body': json.dumps(search_results['hits']['hits'])
                  }
              else:
                  # Return empty array if no keywords found
                  return {
                      'statusCode': 200,
                      'body': json.dumps([])
                  }
      Runtime: python3.8

  PhotoApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PhotoAlbumAPI

    ApiGatewayToS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::dc-photo-storage-bucket/*

  
  # API Gateway Resource and Methods for /photos and /search
  PhotosResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt PhotoApi.RootResourceId
      PathPart: photos
      RestApiId: !Ref PhotoApi

  PhotosPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      ResourceId: !Ref PhotosResource
      RestApiId: !Ref PhotoApi
      Integration:
        IntegrationHttpMethod: PUT
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:s3:path/${PhotoStorageBucket}/{object}
        Credentials: !GetAtt ApiGatewayToS3Role.Arn


  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt PhotoApi.RootResourceId
      PathPart: search
      RestApiId: !Ref PhotoApi

  SearchGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref SearchResource
      RestApiId: !Ref PhotoApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchPhotosFunction.Arn}/invocations

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

      Policies:
        - PolicyName: LambdaS3AccessPolicy 
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow 
                Action:
                  - s3:GetObject 
                  - s3:GetObjectAcl 
                  - s3:GetObjectVersion 
                  - s3:GetObjectVersionAcl 
                  - s3:GetBucketLocation 
                Resource:
                  - arn:aws:s3:::dc-photo-storage-bucket/*
                  - arn:aws:s3:::dc-photo-storage-bucket

Outputs:

  FrontendBucketURL:
    Description : "URL of the frontend S3 bucket"
    Value : !GetAtt FrontendBucket.WebsiteURL
